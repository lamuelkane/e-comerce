import axios from 'axios';
import React, { useEffect, useRef, useState, useContext } from 'react';
import {io} from 'socket.io-client'
import styles from '../styles/messages.module.css'
import Head from 'next/head'
import { Converssation } from '../components/Converssation'
import { Onlineuser } from '../components/Onlineuser'
import SendIcon from '@material-ui/icons/Send';
import Message from '../components/Message'
import ArrowBackIcon from '@material-ui/icons/ArrowBack';
import {GlobalContext} from '../context/Globalcontext'

const Messages = () => {
    let {sever} = useContext(GlobalContext)
    const [showcontent, setshowcontent] = useState(false)
    const socket = useRef()
    const scroll = useRef()
    const message = useRef()
    const [conversations, setconversations] = useState([])
    const [usersonline, setusersonline] = useState([])
    const [senderid, setsenderid] = useState('')
    const [messages, setmessages] = useState([])
    const [admin, setadmin] = useState('')
    let count = 0
    let unreadMessages = []

    useEffect(() => {
        setadmin( localStorage.getItem('user')?JSON.parse(localStorage.getItem('user'))._id:'')
        getMessages()
        socket.current = io('ws://advancedshoopinsocket.herokuapp.com/')
       socket.current.on('getusers', (users) => {
        setusersonline(users)
       })

       socket.current.on('removeuser', (users) => {
           console.log(users + 'one user disconnected......')
           setusersonline(users)
       })

       socket.current?.emit('adduser', admin)

       socket.current?.on('getusermessage', msg => {
       setmessages([...messages, msg])
       msg.received = true 
       updatemessage(msg)
       console.log(msg, unreadMessages)
       socket.current.emit('usermessagestatus', msg.senderid)
        getMessages()
    })

    socket.current.on('getusermessagestatus', msg => {
        getMessages()
    })

    },[])

    let sendMessage = async(e) => {
        if(!message.current.value) return
        const msg = {
            receiverid:admin,
            text: message.current.value,
            senderid,
        }

        try {
            const {data} = await axios.post(`${sever}/chats/message`, msg)
            message.current.value = ''
            console.clear()
            console.log(data, msg)
            getMessages()
            socket.current.emit('sendtouser', data)
         console.log(data._id + 'message sent' + [...data])
        } catch (error) {
            // console.clear()
            console.log(error)
        }
   
    }
    
    let getMessages = async() => {
        try {
            const {data} = await axios.get(`${sever}/chats/messages`)
            setmessages(data)
            let random = []
            data.map(da => {
               let sd = random.find(el => {
                   if (el === da.senderid || el === da.receiverid || da.senderid === admin) {
                       return true
                   }
                   return false
                })?"":random.push(da.senderid)
                })
                random = random.filter(id => id !== admin)
                setconversations(random)
                scroll.current?.scrollIntoView({behavior: 'smooth'})
                console.clear()
           console.log(conversations, random)
            console.log(data)
            // console.log(messages)
        } catch (error) {
            console.log(error)
        }
    }

    let updatemessages = async(unreadMessages)=> {
        try {
            const {data} = await axios.post('/chats/messages/update', unreadMessages)
            console.log(data)
        } catch (error) {
          console.log(error)  
        }

    }

    let updatemessage = async(unreadMessages)=> {
        try {
            const {data} = await axios.post('/chats/message/update', unreadMessages)
           // console.log(data)
        } catch (error) {
          console.log(error)  
        }

    }


    return (      
        <div>
             <Head>
                <title>Admin messages</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="./assets/images/logo.jpg" />
            </Head>
            <div>
                <div className={`${styles.messages}`}>
                    <div className={`${styles.messagesSidewrapper}`}>
                        <div className={`${styles.messageconversationheader}`}>
                            <div>
                                <input type="text" placeholder='search conversation' className={`${styles.messageconversationheaderinput}`}/>
                            </div>
                            <div className={`${styles.onlineusers}`}>
                               {
                                   usersonline.map(user => (
                                        <Onlineuser key={user.userid} />
                                   ))
                               }
                            </div>
                        </div>
                        <div>
                           {
                               conversations.map(con => (
                                    <Converssation 
                                        setshowcontent={setshowcontent}
                                        key={con.senderid}
                                        id={con}
                                        setsenderid={setsenderid}
                                    />
                               ))
                           }
                        </div>
                    </div>
                    {
                    senderid?
                    <div className={`${styles.messagesContentwrapper}  ${!senderid && styles.hidecontent}`}>
                        <div className={`${styles.messagesContentheader} flex align-center`}>
                          <span onClick={e => setsenderid('')} className={`pointer ${styles.hidecontentarrow}`}><ArrowBackIcon /></span>  <h3>John cutler</h3>
                        </div>     
                        <div className={`${styles.messagesContentmain} bluebg`}>
                            {
                                messages.filter(mes => mes.senderid === senderid).map(mess => (
                                   <Message ref={scroll} message={mess} key={mess._id} admin={mess.receiverid}/>
                                ))
                            }
                        </div>
                        <div className={`${styles.messagesContentfooter}`}>
                            <textarea name="" id="" cols="30" rows="10" className={`${styles.messagesContentfootertext}`} ref={message}  ></textarea>
                            <button className={`${styles.sendbtn} pointer`} onClick={sendMessage} >
                                <SendIcon />
                            </button>
                        </div>
                    </div> : <div className={`${styles.messagesContentwrapper} ${!senderid && styles.hidecontent}`}>
                        <div className={`${styles.nomessage}`}>
                             <h1 className={`${styles.nomessagetext}`}>CLICK ON A CONVERSATION TO SEE MESSAGES</h1>
                        </div>
                    </div>
                     }
                </div>
            </div>
        </div>
    )
}


export default Messages